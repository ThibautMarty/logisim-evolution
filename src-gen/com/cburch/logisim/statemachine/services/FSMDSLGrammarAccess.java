/*
 * generated by Xtext
 */
package com.cburch.logisim.statemachine.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FSMDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFSMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommandStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPredicateStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TOP:
		//	FSM | CommandStmt | PredicateStmt;
		@Override public ParserRule getRule() { return rule; }

		//FSM | CommandStmt | PredicateStmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//FSM
		public RuleCall getFSMParserRuleCall_0() { return cFSMParserRuleCall_0; }

		//CommandStmt
		public RuleCall getCommandStmtParserRuleCall_1() { return cCommandStmtParserRuleCall_1; }

		//PredicateStmt
		public RuleCall getPredicateStmtParserRuleCall_2() { return cPredicateStmtParserRuleCall_2; }
	}

	public class CommandStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommandStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInShortInputParserRuleCall_1_0 = (RuleCall)cInAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInShortInputParserRuleCall_2_1_0 = (RuleCall)cInAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutShortOutputParserRuleCall_5_0 = (RuleCall)cOutAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOutAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOutShortOutputParserRuleCall_6_1_0 = (RuleCall)cOutAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCommandsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCommandsCommandParserRuleCall_8_0 = (RuleCall)cCommandsAssignment_8.eContents().get(0);
		private final Assignment cCommandsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCommandsCommandParserRuleCall_9_0 = (RuleCall)cCommandsAssignment_9.eContents().get(0);
		
		//CommandStmt:
		//	"[" in+=ShortInput ("," in+=ShortInput)* "]" "[" out+=ShortOutput ("," out+=ShortOutput)* "]" commands+=Command
		//	commands+=Command*;
		@Override public ParserRule getRule() { return rule; }

		//"[" in+=ShortInput ("," in+=ShortInput)* "]" "[" out+=ShortOutput ("," out+=ShortOutput)* "]" commands+=Command
		//commands+=Command*
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//in+=ShortInput
		public Assignment getInAssignment_1() { return cInAssignment_1; }

		//ShortInput
		public RuleCall getInShortInputParserRuleCall_1_0() { return cInShortInputParserRuleCall_1_0; }

		//("," in+=ShortInput)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//in+=ShortInput
		public Assignment getInAssignment_2_1() { return cInAssignment_2_1; }

		//ShortInput
		public RuleCall getInShortInputParserRuleCall_2_1_0() { return cInShortInputParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//out+=ShortOutput
		public Assignment getOutAssignment_5() { return cOutAssignment_5; }

		//ShortOutput
		public RuleCall getOutShortOutputParserRuleCall_5_0() { return cOutShortOutputParserRuleCall_5_0; }

		//("," out+=ShortOutput)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//out+=ShortOutput
		public Assignment getOutAssignment_6_1() { return cOutAssignment_6_1; }

		//ShortOutput
		public RuleCall getOutShortOutputParserRuleCall_6_1_0() { return cOutShortOutputParserRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }

		//commands+=Command
		public Assignment getCommandsAssignment_8() { return cCommandsAssignment_8; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_8_0() { return cCommandsCommandParserRuleCall_8_0; }

		//commands+=Command*
		public Assignment getCommandsAssignment_9() { return cCommandsAssignment_9; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_9_0() { return cCommandsCommandParserRuleCall_9_0; }
	}

	public class PredicateStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInShortInputParserRuleCall_1_0 = (RuleCall)cInAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInShortInputParserRuleCall_2_1_0 = (RuleCall)cInAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicatePredicateParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PredicateStmt:
		//	"[" in+=ShortInput ("," in+=ShortInput)* "]" predicate=Predicate ";";
		@Override public ParserRule getRule() { return rule; }

		//"[" in+=ShortInput ("," in+=ShortInput)* "]" predicate=Predicate ";"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//in+=ShortInput
		public Assignment getInAssignment_1() { return cInAssignment_1; }

		//ShortInput
		public RuleCall getInShortInputParserRuleCall_1_0() { return cInShortInputParserRuleCall_1_0; }

		//("," in+=ShortInput)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//in+=ShortInput
		public Assignment getInAssignment_2_1() { return cInAssignment_2_1; }

		//ShortInput
		public RuleCall getInShortInputParserRuleCall_2_1_0() { return cInShortInputParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//predicate=Predicate
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }

		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_4_0() { return cPredicatePredicateParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ShortInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWidthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWidthINTTerminalRuleCall_3_0 = (RuleCall)cWidthAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ShortInput:
		//	{InputPort} name=ID "[" width=INT "]";
		@Override public ParserRule getRule() { return rule; }

		//{InputPort} name=ID "[" width=INT "]"
		public Group getGroup() { return cGroup; }

		//{InputPort}
		public Action getInputPortAction_0() { return cInputPortAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//width=INT
		public Assignment getWidthAssignment_3() { return cWidthAssignment_3; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_3_0() { return cWidthINTTerminalRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ShortOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWidthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWidthINTTerminalRuleCall_3_0 = (RuleCall)cWidthAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ShortOutput:
		//	{OutputPort} name=ID "[" width=INT "]";
		@Override public ParserRule getRule() { return rule; }

		//{OutputPort} name=ID "[" width=INT "]"
		public Group getGroup() { return cGroup; }

		//{OutputPort}
		public Action getOutputPortAction_0() { return cOutputPortAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//width=INT
		public Assignment getWidthAssignment_3() { return cWidthAssignment_3; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_3_0() { return cWidthINTTerminalRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class FSMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FSM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFSMAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFsmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLayoutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_3_0 = (RuleCall)cLayoutAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cInAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cInInputParserRuleCall_5_0_0 = (RuleCall)cInAssignment_5_0.eContents().get(0);
		private final Assignment cOutAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cOutOutputParserRuleCall_5_1_0 = (RuleCall)cOutAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCodeWidthKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cWidthAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cWidthINTTerminalRuleCall_6_2_0 = (RuleCall)cWidthAssignment_6_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cResetKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cStartAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cStartStateCrossReference_7_2_0 = (CrossReference)cStartAssignment_7_2.eContents().get(0);
		private final RuleCall cStartStateIDTerminalRuleCall_7_2_0_1 = (RuleCall)cStartStateCrossReference_7_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cStatesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatesStateParserRuleCall_8_0 = (RuleCall)cStatesAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//FSM:
		//	{FSM} "fsm" name=ID layout=LayoutInfo "{" (in+=Input | out+=Output)+ ("codeWidth" "=" width=INT ";")? ("reset" "="
		//	start=[State] ";")? states+=State* "}";
		@Override public ParserRule getRule() { return rule; }

		//{FSM} "fsm" name=ID layout=LayoutInfo "{" (in+=Input | out+=Output)+ ("codeWidth" "=" width=INT ";")? ("reset" "="
		//start=[State] ";")? states+=State* "}"
		public Group getGroup() { return cGroup; }

		//{FSM}
		public Action getFSMAction_0() { return cFSMAction_0; }

		//"fsm"
		public Keyword getFsmKeyword_1() { return cFsmKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_3() { return cLayoutAssignment_3; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_3_0() { return cLayoutLayoutInfoParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(in+=Input | out+=Output)+
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//in+=Input
		public Assignment getInAssignment_5_0() { return cInAssignment_5_0; }

		//Input
		public RuleCall getInInputParserRuleCall_5_0_0() { return cInInputParserRuleCall_5_0_0; }

		//out+=Output
		public Assignment getOutAssignment_5_1() { return cOutAssignment_5_1; }

		//Output
		public RuleCall getOutOutputParserRuleCall_5_1_0() { return cOutOutputParserRuleCall_5_1_0; }

		//("codeWidth" "=" width=INT ";")?
		public Group getGroup_6() { return cGroup_6; }

		//"codeWidth"
		public Keyword getCodeWidthKeyword_6_0() { return cCodeWidthKeyword_6_0; }

		//"="
		public Keyword getEqualsSignKeyword_6_1() { return cEqualsSignKeyword_6_1; }

		//width=INT
		public Assignment getWidthAssignment_6_2() { return cWidthAssignment_6_2; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_6_2_0() { return cWidthINTTerminalRuleCall_6_2_0; }

		//";"
		public Keyword getSemicolonKeyword_6_3() { return cSemicolonKeyword_6_3; }

		//("reset" "=" start=[State] ";")?
		public Group getGroup_7() { return cGroup_7; }

		//"reset"
		public Keyword getResetKeyword_7_0() { return cResetKeyword_7_0; }

		//"="
		public Keyword getEqualsSignKeyword_7_1() { return cEqualsSignKeyword_7_1; }

		//start=[State]
		public Assignment getStartAssignment_7_2() { return cStartAssignment_7_2; }

		//[State]
		public CrossReference getStartStateCrossReference_7_2_0() { return cStartStateCrossReference_7_2_0; }

		//ID
		public RuleCall getStartStateIDTerminalRuleCall_7_2_0_1() { return cStartStateIDTerminalRuleCall_7_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7_3() { return cSemicolonKeyword_7_3; }

		//states+=State*
		public Assignment getStatesAssignment_8() { return cStatesAssignment_8; }

		//State
		public RuleCall getStatesStateParserRuleCall_8_0() { return cStatesStateParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class FSMElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FSMElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFSMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommandListParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOutputParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTransitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//FSMElement:
		//	FSM | Input | CommandList | State | Output | Transition;
		@Override public ParserRule getRule() { return rule; }

		//FSM | Input | CommandList | State | Output | Transition
		public Alternatives getAlternatives() { return cAlternatives; }

		//FSM
		public RuleCall getFSMParserRuleCall_0() { return cFSMParserRuleCall_0; }

		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }

		//CommandList
		public RuleCall getCommandListParserRuleCall_2() { return cCommandListParserRuleCall_2; }

		//State
		public RuleCall getStateParserRuleCall_3() { return cStateParserRuleCall_3; }

		//Output
		public RuleCall getOutputParserRuleCall_4() { return cOutputParserRuleCall_4; }

		//Transition
		public RuleCall getTransitionParserRuleCall_5() { return cTransitionParserRuleCall_5; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWidthAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_3_1_0 = (RuleCall)cWidthAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cLayoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_4_0 = (RuleCall)cLayoutAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Input returns Port:
		//	{InputPort} "in" name=ID ("[" width=INT "]")? layout=LayoutInfo ";";
		@Override public ParserRule getRule() { return rule; }

		//{InputPort} "in" name=ID ("[" width=INT "]")? layout=LayoutInfo ";"
		public Group getGroup() { return cGroup; }

		//{InputPort}
		public Action getInputPortAction_0() { return cInputPortAction_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("[" width=INT "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//width=INT
		public Assignment getWidthAssignment_3_1() { return cWidthAssignment_3_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_3_1_0() { return cWidthINTTerminalRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_4() { return cLayoutAssignment_4; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_4_0() { return cLayoutLayoutInfoParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWidthAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_3_1_0 = (RuleCall)cWidthAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cLayoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_4_0 = (RuleCall)cLayoutAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Output returns Port:
		//	{OutputPort} "out" name=ID ("[" width=INT "]")? layout=LayoutInfo ";";
		@Override public ParserRule getRule() { return rule; }

		//{OutputPort} "out" name=ID ("[" width=INT "]")? layout=LayoutInfo ";"
		public Group getGroup() { return cGroup; }

		//{OutputPort}
		public Action getOutputPortAction_0() { return cOutputPortAction_0; }

		//"out"
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("[" width=INT "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//width=INT
		public Assignment getWidthAssignment_3_1() { return cWidthAssignment_3_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_3_1_0() { return cWidthINTTerminalRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_4() { return cLayoutAssignment_4; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_4_0() { return cLayoutLayoutInfoParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class CommandListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommandList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommandsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLayoutAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_1_1_0 = (RuleCall)cLayoutAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCommandsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cCommandsCommandParserRuleCall_1_3_0 = (RuleCall)cCommandsAssignment_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//CommandList:
		//	{CommandList} ("commands" layout=LayoutInfo "{" commands+=Command* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//{CommandList} ("commands" layout=LayoutInfo "{" commands+=Command* "}")?
		public Group getGroup() { return cGroup; }

		//{CommandList}
		public Action getCommandListAction_0() { return cCommandListAction_0; }

		//("commands" layout=LayoutInfo "{" commands+=Command* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"commands"
		public Keyword getCommandsKeyword_1_0() { return cCommandsKeyword_1_0; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_1_1() { return cLayoutAssignment_1_1; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_1_1_0() { return cLayoutLayoutInfoParserRuleCall_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }

		//commands+=Command*
		public Assignment getCommandsAssignment_1_3() { return cCommandsAssignment_1_3; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_3_0() { return cCommandsCommandParserRuleCall_1_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
	}

	public class LayoutInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LayoutInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLayoutInfoAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cXAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_1_0 = (RuleCall)cXAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cYAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_1_3_0 = (RuleCall)cYAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cWidthAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_4_1_0 = (RuleCall)cWidthAssignment_1_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		private final Assignment cHeightAssignment_1_4_3 = (Assignment)cGroup_1_4.eContents().get(3);
		private final RuleCall cHeightINTTerminalRuleCall_1_4_3_0 = (RuleCall)cHeightAssignment_1_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//LayoutInfo:
		//	{LayoutInfo} ("@[" x=INT "," y=INT ("," width=INT "," height=INT)? "]")?;
		@Override public ParserRule getRule() { return rule; }

		//{LayoutInfo} ("@[" x=INT "," y=INT ("," width=INT "," height=INT)? "]")?
		public Group getGroup() { return cGroup; }

		//{LayoutInfo}
		public Action getLayoutInfoAction_0() { return cLayoutInfoAction_0; }

		//("@[" x=INT "," y=INT ("," width=INT "," height=INT)? "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"@["
		public Keyword getCommercialAtLeftSquareBracketKeyword_1_0() { return cCommercialAtLeftSquareBracketKeyword_1_0; }

		//x=INT
		public Assignment getXAssignment_1_1() { return cXAssignment_1_1; }

		//INT
		public RuleCall getXINTTerminalRuleCall_1_1_0() { return cXINTTerminalRuleCall_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//y=INT
		public Assignment getYAssignment_1_3() { return cYAssignment_1_3; }

		//INT
		public RuleCall getYINTTerminalRuleCall_1_3_0() { return cYINTTerminalRuleCall_1_3_0; }

		//("," width=INT "," height=INT)?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//","
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }

		//width=INT
		public Assignment getWidthAssignment_1_4_1() { return cWidthAssignment_1_4_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_4_1_0() { return cWidthINTTerminalRuleCall_1_4_1_0; }

		//","
		public Keyword getCommaKeyword_1_4_2() { return cCommaKeyword_1_4_2; }

		//height=INT
		public Assignment getHeightAssignment_1_4_3() { return cHeightAssignment_1_4_3; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_1_4_3_0() { return cHeightINTTerminalRuleCall_1_4_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_5() { return cRightSquareBracketKeyword_1_5; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCodeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCodeBINTerminalRuleCall_3_1_0 = (RuleCall)cCodeAssignment_3_1.eContents().get(0);
		private final Assignment cLayoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_4_0 = (RuleCall)cLayoutAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCodeKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cCodeAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cCodeBINTerminalRuleCall_6_2_0 = (RuleCall)cCodeAssignment_6_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cCommandListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCommandListCommandListParserRuleCall_7_0 = (RuleCall)cCommandListAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cTransitionsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cTransitionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cTransitionTransitionParserRuleCall_8_2_0 = (RuleCall)cTransitionAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//State:
		//	{State} "state" name=ID ("=" code=BIN)? layout=LayoutInfo "{" ("code" "=" code=BIN ";")? commandList=CommandList
		//	("transitions" "{" transition+=Transition* "}")? "}";
		@Override public ParserRule getRule() { return rule; }

		//{State} "state" name=ID ("=" code=BIN)? layout=LayoutInfo "{" ("code" "=" code=BIN ";")? commandList=CommandList
		//("transitions" "{" transition+=Transition* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{State}
		public Action getStateAction_0() { return cStateAction_0; }

		//"state"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("=" code=BIN)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//code=BIN
		public Assignment getCodeAssignment_3_1() { return cCodeAssignment_3_1; }

		//BIN
		public RuleCall getCodeBINTerminalRuleCall_3_1_0() { return cCodeBINTerminalRuleCall_3_1_0; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_4() { return cLayoutAssignment_4; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_4_0() { return cLayoutLayoutInfoParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//("code" "=" code=BIN ";")?
		public Group getGroup_6() { return cGroup_6; }

		//"code"
		public Keyword getCodeKeyword_6_0() { return cCodeKeyword_6_0; }

		//"="
		public Keyword getEqualsSignKeyword_6_1() { return cEqualsSignKeyword_6_1; }

		//code=BIN
		public Assignment getCodeAssignment_6_2() { return cCodeAssignment_6_2; }

		//BIN
		public RuleCall getCodeBINTerminalRuleCall_6_2_0() { return cCodeBINTerminalRuleCall_6_2_0; }

		//";"
		public Keyword getSemicolonKeyword_6_3() { return cSemicolonKeyword_6_3; }

		//commandList=CommandList
		public Assignment getCommandListAssignment_7() { return cCommandListAssignment_7; }

		//CommandList
		public RuleCall getCommandListCommandListParserRuleCall_7_0() { return cCommandListCommandListParserRuleCall_7_0; }

		//("transitions" "{" transition+=Transition* "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"transitions"
		public Keyword getTransitionsKeyword_8_0() { return cTransitionsKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//transition+=Transition*
		public Assignment getTransitionAssignment_8_2() { return cTransitionAssignment_8_2; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_8_2_0() { return cTransitionTransitionParserRuleCall_8_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cSrcAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final CrossReference cSrcStateCrossReference_0_0_0_0 = (CrossReference)cSrcAssignment_0_0_0.eContents().get(0);
		private final RuleCall cSrcStateIDTerminalRuleCall_0_0_0_0_1 = (RuleCall)cSrcStateCrossReference_0_0_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cGotoKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cDstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDstStateCrossReference_1_0 = (CrossReference)cDstAssignment_1.eContents().get(0);
		private final RuleCall cDstStateIDTerminalRuleCall_1_0_1 = (RuleCall)cDstStateCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPredicateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_2_1_0 = (RuleCall)cPredicateAssignment_2_1.eContents().get(0);
		private final Assignment cLayoutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_3_0 = (RuleCall)cLayoutAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Transition:
		//	(src=[State]? "->" | "goto") dst=[State] ("when" predicate=Predicate)? layout=LayoutInfo ";";
		@Override public ParserRule getRule() { return rule; }

		//(src=[State]? "->" | "goto") dst=[State] ("when" predicate=Predicate)? layout=LayoutInfo ";"
		public Group getGroup() { return cGroup; }

		//src=[State]? "->" | "goto"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//src=[State]? "->"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//src=[State]?
		public Assignment getSrcAssignment_0_0_0() { return cSrcAssignment_0_0_0; }

		//[State]
		public CrossReference getSrcStateCrossReference_0_0_0_0() { return cSrcStateCrossReference_0_0_0_0; }

		//ID
		public RuleCall getSrcStateIDTerminalRuleCall_0_0_0_0_1() { return cSrcStateIDTerminalRuleCall_0_0_0_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_0_1; }

		//"goto"
		public Keyword getGotoKeyword_0_1() { return cGotoKeyword_0_1; }

		//dst=[State]
		public Assignment getDstAssignment_1() { return cDstAssignment_1; }

		//[State]
		public CrossReference getDstStateCrossReference_1_0() { return cDstStateCrossReference_1_0; }

		//ID
		public RuleCall getDstStateIDTerminalRuleCall_1_0_1() { return cDstStateIDTerminalRuleCall_1_0_1; }

		//("when" predicate=Predicate)?
		public Group getGroup_2() { return cGroup_2; }

		//"when"
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }

		//predicate=Predicate
		public Assignment getPredicateAssignment_2_1() { return cPredicateAssignment_2_1; }

		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_2_1_0() { return cPredicatePredicateParserRuleCall_2_1_0; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_3() { return cLayoutAssignment_3; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_3_0() { return cLayoutLayoutInfoParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameOutputPortCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameOutputPortIDTerminalRuleCall_0_0_1 = (RuleCall)cNameOutputPortCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueOrParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Command:
		//	name=[OutputPort] "=" value=Or ";";
		@Override public ParserRule getRule() { return rule; }

		//name=[OutputPort] "=" value=Or ";"
		public Group getGroup() { return cGroup; }

		//name=[OutputPort]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[OutputPort]
		public CrossReference getNameOutputPortCrossReference_0_0() { return cNameOutputPortCrossReference_0_0; }

		//ID
		public RuleCall getNameOutputPortIDTerminalRuleCall_0_0_1() { return cNameOutputPortIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Or
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Or
		public RuleCall getValueOrParserRuleCall_2_0() { return cValueOrParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class RefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPortRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPortPortCrossReference_1_0 = (CrossReference)cPortAssignment_1.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_1_0_1 = (RuleCall)cPortPortCrossReference_1_0.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		
		//Ref returns BoolExpr:
		//	{PortRef} port=[Port] range=Range?;
		@Override public ParserRule getRule() { return rule; }

		//{PortRef} port=[Port] range=Range?
		public Group getGroup() { return cGroup; }

		//{PortRef}
		public Action getPortRefAction_0() { return cPortRefAction_0; }

		//port=[Port]
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }

		//[Port]
		public CrossReference getPortPortCrossReference_1_0() { return cPortPortCrossReference_1_0; }

		//ID
		public RuleCall getPortPortIDTerminalRuleCall_1_0_1() { return cPortPortIDTerminalRuleCall_1_0_1; }

		//range=Range?
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//Range
		public RuleCall getRangeRangeParserRuleCall_2_0() { return cRangeRangeParserRuleCall_2_0; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cUbAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUbINTTerminalRuleCall_1_0_0 = (RuleCall)cUbAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLbINTTerminalRuleCall_2_0 = (RuleCall)cLbAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Range:
		//	"[" (ub=INT ":")? lb=INT "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" (ub=INT ":")? lb=INT "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//(ub=INT ":")?
		public Group getGroup_1() { return cGroup_1; }

		//ub=INT
		public Assignment getUbAssignment_1_0() { return cUbAssignment_1_0; }

		//INT
		public RuleCall getUbINTTerminalRuleCall_1_0_0() { return cUbINTTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//lb=INT
		public Assignment getLbAssignment_2() { return cLbAssignment_2; }

		//INT
		public RuleCall getLbINTTerminalRuleCall_2_0() { return cLbINTTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefaultParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Predicate returns BoolExpr:
		//	Default | Or;
		@Override public ParserRule getRule() { return rule; }

		//Default | Or
		public Alternatives getAlternatives() { return cAlternatives; }

		//Default
		public RuleCall getDefaultParserRuleCall_0() { return cDefaultParserRuleCall_0; }

		//Or
		public RuleCall getOrParserRuleCall_1() { return cOrParserRuleCall_1; }
	}

	public class DefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Default");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefaultPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Default returns BoolExpr:
		//	{DefaultPredicate} "default";
		@Override public ParserRule getRule() { return rule; }

		//{DefaultPredicate} "default"
		public Group getGroup() { return cGroup; }

		//{DefaultPredicate}
		public Action getDefaultPredicateAction_0() { return cDefaultPredicateAction_0; }

		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExprArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsAndParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//Or returns BoolExpr:
		//	And ({OrExpr.args+=current} "+" args+=And)*;
		@Override public ParserRule getRule() { return rule; }

		//And ({OrExpr.args+=current} "+" args+=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({OrExpr.args+=current} "+" args+=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpr.args+=current}
		public Action getOrExprArgsAction_1_0() { return cOrExprArgsAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//args+=And
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }

		//And
		public RuleCall getArgsAndParserRuleCall_1_2_0() { return cArgsAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExprArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsCmpParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//And returns BoolExpr:
		//	Cmp ({AndExpr.args+=current} "." args+=Cmp)*;
		@Override public ParserRule getRule() { return rule; }

		//Cmp ({AndExpr.args+=current} "." args+=Cmp)*
		public Group getGroup() { return cGroup; }

		//Cmp
		public RuleCall getCmpParserRuleCall_0() { return cCmpParserRuleCall_0; }

		//({AndExpr.args+=current} "." args+=Cmp)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpr.args+=current}
		public Action getAndExprArgsAction_1_0() { return cAndExprArgsAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//args+=Cmp
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }

		//Cmp
		public RuleCall getArgsCmpParserRuleCall_1_2_0() { return cArgsCmpParserRuleCall_1_2_0; }
	}

	public class CmpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cmp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCmpExprArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsPrimaryParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//Cmp returns BoolExpr:
		//	Primary ({CmpExpr.args+=current} op=("==" | "/=") args+=Primary)?;
		@Override public ParserRule getRule() { return rule; }

		//Primary ({CmpExpr.args+=current} op=("==" | "/=") args+=Primary)?
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({CmpExpr.args+=current} op=("==" | "/=") args+=Primary)?
		public Group getGroup_1() { return cGroup_1; }

		//{CmpExpr.args+=current}
		public Action getCmpExprArgsAction_1_0() { return cCmpExprArgsAction_1_0; }

		//op=("==" | "/=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"==" | "/="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"/="
		public Keyword getOpSolidusEqualsSignKeyword_1_1_0_1() { return cOpSolidusEqualsSignKeyword_1_1_0_1; }

		//args+=Primary
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }

		//Primary
		public RuleCall getArgsPrimaryParserRuleCall_1_2_0() { return cArgsPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cOrParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNotParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary returns BoolExpr:
		//	"(" Or ")" | Constant | Not | Ref;
		@Override public ParserRule getRule() { return rule; }

		//"(" Or ")" | Constant | Not | Ref
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Or ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Or
		public RuleCall getOrParserRuleCall_0_1() { return cOrParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }

		//Not
		public RuleCall getNotParserRuleCall_2() { return cNotParserRuleCall_2; }

		//Ref
		public RuleCall getRefParserRuleCall_3() { return cRefParserRuleCall_3; }
	}

	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsPrimaryParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		
		//Not returns BoolExpr:
		//	{NotExpr} "/" args+=Primary;
		@Override public ParserRule getRule() { return rule; }

		//{NotExpr} "/" args+=Primary
		public Group getGroup() { return cGroup; }

		//{NotExpr}
		public Action getNotExprAction_0() { return cNotExprAction_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//args+=Primary
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//Primary
		public RuleCall getArgsPrimaryParserRuleCall_2_0() { return cArgsPrimaryParserRuleCall_2_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBINTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Constant returns BoolExpr:
		//	{Constant} value=BIN;
		@Override public ParserRule getRule() { return rule; }

		//{Constant} value=BIN
		public Group getGroup() { return cGroup; }

		//{Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }

		//value=BIN
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BIN
		public RuleCall getValueBINTerminalRuleCall_1_0() { return cValueBINTerminalRuleCall_1_0; }
	}
	
	
	private final TOPElements pTOP;
	private final CommandStmtElements pCommandStmt;
	private final PredicateStmtElements pPredicateStmt;
	private final ShortInputElements pShortInput;
	private final ShortOutputElements pShortOutput;
	private final FSMElements pFSM;
	private final FSMElementElements pFSMElement;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandListElements pCommandList;
	private final LayoutInfoElements pLayoutInfo;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final CommandElements pCommand;
	private final RefElements pRef;
	private final RangeElements pRange;
	private final PredicateElements pPredicate;
	private final DefaultElements pDefault;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final CmpElements pCmp;
	private final PrimaryElements pPrimary;
	private final NotElements pNot;
	private final ConstantElements pConstant;
	private final TerminalRule tBIN;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FSMDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTOP = new TOPElements();
		this.pCommandStmt = new CommandStmtElements();
		this.pPredicateStmt = new PredicateStmtElements();
		this.pShortInput = new ShortInputElements();
		this.pShortOutput = new ShortOutputElements();
		this.pFSM = new FSMElements();
		this.pFSMElement = new FSMElementElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommandList = new CommandListElements();
		this.pLayoutInfo = new LayoutInfoElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pCommand = new CommandElements();
		this.pRef = new RefElements();
		this.pRange = new RangeElements();
		this.pPredicate = new PredicateElements();
		this.pDefault = new DefaultElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pCmp = new CmpElements();
		this.pPrimary = new PrimaryElements();
		this.pNot = new NotElements();
		this.pConstant = new ConstantElements();
		this.tBIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BIN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.cburch.logisim.statemachine.FSMDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TOP:
	//	FSM | CommandStmt | PredicateStmt;
	public TOPElements getTOPAccess() {
		return pTOP;
	}
	
	public ParserRule getTOPRule() {
		return getTOPAccess().getRule();
	}

	//CommandStmt:
	//	"[" in+=ShortInput ("," in+=ShortInput)* "]" "[" out+=ShortOutput ("," out+=ShortOutput)* "]" commands+=Command
	//	commands+=Command*;
	public CommandStmtElements getCommandStmtAccess() {
		return pCommandStmt;
	}
	
	public ParserRule getCommandStmtRule() {
		return getCommandStmtAccess().getRule();
	}

	//PredicateStmt:
	//	"[" in+=ShortInput ("," in+=ShortInput)* "]" predicate=Predicate ";";
	public PredicateStmtElements getPredicateStmtAccess() {
		return pPredicateStmt;
	}
	
	public ParserRule getPredicateStmtRule() {
		return getPredicateStmtAccess().getRule();
	}

	//ShortInput:
	//	{InputPort} name=ID "[" width=INT "]";
	public ShortInputElements getShortInputAccess() {
		return pShortInput;
	}
	
	public ParserRule getShortInputRule() {
		return getShortInputAccess().getRule();
	}

	//ShortOutput:
	//	{OutputPort} name=ID "[" width=INT "]";
	public ShortOutputElements getShortOutputAccess() {
		return pShortOutput;
	}
	
	public ParserRule getShortOutputRule() {
		return getShortOutputAccess().getRule();
	}

	//FSM:
	//	{FSM} "fsm" name=ID layout=LayoutInfo "{" (in+=Input | out+=Output)+ ("codeWidth" "=" width=INT ";")? ("reset" "="
	//	start=[State] ";")? states+=State* "}";
	public FSMElements getFSMAccess() {
		return pFSM;
	}
	
	public ParserRule getFSMRule() {
		return getFSMAccess().getRule();
	}

	//FSMElement:
	//	FSM | Input | CommandList | State | Output | Transition;
	public FSMElementElements getFSMElementAccess() {
		return pFSMElement;
	}
	
	public ParserRule getFSMElementRule() {
		return getFSMElementAccess().getRule();
	}

	//Input returns Port:
	//	{InputPort} "in" name=ID ("[" width=INT "]")? layout=LayoutInfo ";";
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Output returns Port:
	//	{OutputPort} "out" name=ID ("[" width=INT "]")? layout=LayoutInfo ";";
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	//CommandList:
	//	{CommandList} ("commands" layout=LayoutInfo "{" commands+=Command* "}")?;
	public CommandListElements getCommandListAccess() {
		return pCommandList;
	}
	
	public ParserRule getCommandListRule() {
		return getCommandListAccess().getRule();
	}

	//LayoutInfo:
	//	{LayoutInfo} ("@[" x=INT "," y=INT ("," width=INT "," height=INT)? "]")?;
	public LayoutInfoElements getLayoutInfoAccess() {
		return pLayoutInfo;
	}
	
	public ParserRule getLayoutInfoRule() {
		return getLayoutInfoAccess().getRule();
	}

	//State:
	//	{State} "state" name=ID ("=" code=BIN)? layout=LayoutInfo "{" ("code" "=" code=BIN ";")? commandList=CommandList
	//	("transitions" "{" transition+=Transition* "}")? "}";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Transition:
	//	(src=[State]? "->" | "goto") dst=[State] ("when" predicate=Predicate)? layout=LayoutInfo ";";
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Command:
	//	name=[OutputPort] "=" value=Or ";";
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//Ref returns BoolExpr:
	//	{PortRef} port=[Port] range=Range?;
	public RefElements getRefAccess() {
		return pRef;
	}
	
	public ParserRule getRefRule() {
		return getRefAccess().getRule();
	}

	//Range:
	//	"[" (ub=INT ":")? lb=INT "]";
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//Predicate returns BoolExpr:
	//	Default | Or;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	//Default returns BoolExpr:
	//	{DefaultPredicate} "default";
	public DefaultElements getDefaultAccess() {
		return pDefault;
	}
	
	public ParserRule getDefaultRule() {
		return getDefaultAccess().getRule();
	}

	//Or returns BoolExpr:
	//	And ({OrExpr.args+=current} "+" args+=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns BoolExpr:
	//	Cmp ({AndExpr.args+=current} "." args+=Cmp)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Cmp returns BoolExpr:
	//	Primary ({CmpExpr.args+=current} op=("==" | "/=") args+=Primary)?;
	public CmpElements getCmpAccess() {
		return pCmp;
	}
	
	public ParserRule getCmpRule() {
		return getCmpAccess().getRule();
	}

	//Primary returns BoolExpr:
	//	"(" Or ")" | Constant | Not | Ref;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Not returns BoolExpr:
	//	{NotExpr} "/" args+=Primary;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//Constant returns BoolExpr:
	//	{Constant} value=BIN;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//terminal BIN:
	//	"\"" ("0" | "1")+ "\"";
	public TerminalRule getBINRule() {
		return tBIN;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

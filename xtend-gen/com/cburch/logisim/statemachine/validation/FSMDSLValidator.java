/**
 * generated by Xtext
 */
package com.cburch.logisim.statemachine.validation;

import com.cburch.logisim.statemachine.fSMDSL.BoolExpr;
import com.cburch.logisim.statemachine.fSMDSL.Command;
import com.cburch.logisim.statemachine.fSMDSL.InputPort;
import com.cburch.logisim.statemachine.fSMDSL.OutputPort;
import com.cburch.logisim.statemachine.fSMDSL.Port;
import com.cburch.logisim.statemachine.fSMDSL.PortRef;
import com.cburch.logisim.statemachine.validation.AbstractFSMDSLValidator;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class FSMDSLValidator extends AbstractFSMDSLValidator {
  @Check
  public boolean checkCommand(final Command c) {
    boolean _and = false;
    OutputPort _name = c.getName();
    if (!(_name instanceof OutputPort)) {
      _and = false;
    } else {
      BoolExpr _value = c.getValue();
      TreeIterator<EObject> _eAllContents = _value.eAllContents();
      Iterator<PortRef> _filter = Iterators.<PortRef>filter(_eAllContents, PortRef.class);
      final Function1<PortRef, Boolean> _function = (PortRef ref) -> {
        Port _port = ref.getPort();
        return Boolean.valueOf((_port instanceof InputPort));
      };
      boolean _forall = IteratorExtensions.<PortRef>forall(_filter, _function);
      _and = _forall;
    }
    return _and;
  }
}

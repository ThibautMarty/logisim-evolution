grammar com.cburch.logisim.statemachine.FSMDSL with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate fSMDSL "http://www.cburch.com/logisim/statemachine/FSMDSL"

TOP: 
	FSM | 
	CommandStmt | 
	PredicateStmt
;

CommandStmt :
	'[' in+=ShortInput (',' in+=ShortInput )*']'
	'[' out+=ShortOutput (',' out+=ShortOutput )*']'
	(commands+=Command) (',' commands+=Command)*
;


PredicateStmt :
	'[' in+=ShortInput (',' in+=ShortInput )*']' predicate=Predicate ';'
;

ShortInput :  {InputPort}  name =ID '[' width=INT']' ;

ShortOutput : {OutputPort} name =ID '[' width=INT']';

FSM :
{FSM}'fsm' name=ID (layout=LayoutInfo)  '{'
	(in+=Input | out+=Output)+
	("codeWidth" "=" width=INT ';')?
	("reset" "=" start=[State] ';')?
	(states+=State)*
'}'	
;

FSMElement: FSM | Input | CommandList | State | Output | Transition; 
	


Input returns Port:
	{InputPort} 'in' name =ID ('[' width=INT']')? (layout=LayoutInfo) ';';
	
Output returns Port:
	{OutputPort} 'out' name=ID ('[' width=INT']')? (layout=LayoutInfo) ';';

CommandList :
	{CommandList}('commands' (layout=LayoutInfo) '{'
			(commands+=Command)*
	'}')? 
;

LayoutInfo :
	{LayoutInfo}('@[' x=INT',' y=INT (',' width=INT',' height=INT)?  ']')?
;
State :
	{State}'state' name=ID ('=' code=BIN )? (layout=LayoutInfo) '{'
		('code' '=' code=BIN ';')?
		commandList=CommandList
		('transitions' '{'
			(transition+=Transition)*
		'}')?
	'}';

Transition:
	(((src=[State])? '->')|("goto")) dst=[State] ('when' predicate=Predicate)? (layout=LayoutInfo) ';';
 
Command:
	name=[OutputPort] '=' value=Or ';';
	

Ref returns BoolExpr:
	{PortRef} port=[Port] ('[' ((ub=INT) ':')? lb=INT']')?	
;

Predicate returns BoolExpr : Default | Or ;

Default returns BoolExpr:
	{DefaultPredicate}'default'
;
Or returns BoolExpr:
    And (({OrExpr.args+=current})'+' args+=And)*
;
And returns BoolExpr:
	Cmp (({AndExpr.args+=current})'.' args+=Cmp)*
;

Cmp returns BoolExpr:
	Primary (({AndExpr.args+=current}) (op=('=='|'/=')) args+=Primary)?
;


Primary returns BoolExpr:
	('(' Or ')')
	|
	Constant
	|
	Not
	|
	Ref
	;

Not returns BoolExpr:
	{NotExpr}'/' args+=Primary;
	
Constant returns BoolExpr:
	{Constant}  value=BIN
;

terminal BIN : '"'(('0'|'1')+)'"';
